pipeline {
  agent {
    kubernetes {
      cloud 'kubernetes-int'
      namespace 'jenkins-int-pipeline'
      label "ci-pt-frontend-${UUID.randomUUID().toString()}"
      yamlFile "jenkins/agents/unit.yaml"
      defaultContainer 'pt-ubuntu'
    }
  }
  environment{
    COMPOSE_PROJECT_NAME = 'my-app'
    componentName = 'pt-frontend'
  }
  stages {
    stage('Test') {
      steps {
        checkout scm
        sh '''
          pnpm install --frozen-lockfile
          ls -lah
          ls -lah public
          pnpm test
        '''
      }
    }
    stage('Build') {
      when {
        not{
          branch 'release/v*'
        }
      }
      steps {
        checkout scm
        sh '''
          cd docker
          chmod +x build-stage2.sh

          export export IMAGE_TAG=latest

          ./build-stage2.sh
        '''
      }
    }
    stage('Build release') {
      when {
        branch 'release/v*'
      }
      steps {
        checkout scm
        sh '''
          cd docker
          chmod +x build-stage2.sh

          stripped=${BRANCH_NAME#release/v}
          MAJOR=$(echo $stripped | cut -d'.' -f1)
          MINOR=$(echo $stripped | cut -d'.' -f2)
          export IMAGE_TAG=v$MAJOR.$MINOR.$BUILD_ID

          ./build-stage2.sh
        '''
      }
    }

    stage("Release") {
      when {
        branch 'release/v*'
      }
      stages {
        stage('Package') {
          steps {
            container(name: 'pt-ubuntu', shell: '/bin/bash') {
              dir('pt-dev-ops') {
                checkout scm
                sh '''
                  stripped=${BRANCH_NAME#release/v}
                  MAJOR=$(echo $stripped | cut -d'.' -f1)
                  MINOR=$(echo $stripped | cut -d'.' -f2)
                  VERSION_SEMVER=v$MAJOR.$MINOR.$BUILD_ID

                  HELM_REPO_NAME="charts"
                  HELM_REPO_URL="registry.rdeid.unil.ch"
                  HELM_REPO_GITHUB_URL="ghcr.io/bdsc-cds"
                  HELM_CHART_NAME="pt-frontend-chart"
                  HELM_CHART_VERSION="$VERSION_SEMVER"

                  # Package the Helm chart
                  helm package helm/pt-frontend \
                    --destination . \
                    --version "$HELM_CHART_VERSION" \
                    --app-version "$VERSION_SEMVER"

                  # Login to Helm registry (replace with actual credentials or use a secure method)
                  # helm registry login "$HELM_REPO_URL" --username "your-username" --password "your-password"

                  export HELM_REGISTRY_CONFIG=/pt/pt-deployer/.docker/config.json

                  # Push the Helm chart to the registry
                  helm push "$HELM_CHART_NAME-$HELM_CHART_VERSION.tgz" "oci://$HELM_REPO_URL/$HELM_REPO_NAME"
                  helm push "$HELM_CHART_NAME-$HELM_CHART_VERSION.tgz" "oci://$HELM_REPO_GITHUB_URL/$HELM_REPO_NAME"
                '''
              }
            }
          }
        }
      }
    }

    stage('Master') {
      when {
        branch 'master'
      }
      stages {
        stage('Deploy') {
          steps {
            checkout scm
            sh """
              export env=int
              export IMAGE_TAG=latest
              export RELEASE_NAME="${componentName}-int-master"
              cd deploy
              ./deploy.sh
            """
          }
        }
      }
    }
  }
}
