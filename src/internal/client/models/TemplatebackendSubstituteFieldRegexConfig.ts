/* tslint:disable */
/* eslint-disable */
/**
 * pt backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: development.bdsc@chuv.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TemplatebackendSubstituteFieldRegexConfig
 */
export interface TemplatebackendSubstituteFieldRegexConfig {
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendSubstituteFieldRegexConfig
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendSubstituteFieldRegexConfig
     */
    field?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendSubstituteFieldRegexConfig
     */
    regex?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendSubstituteFieldRegexConfig
     */
    replacement?: string;
}

/**
 * Check if a given object implements the TemplatebackendSubstituteFieldRegexConfig interface.
 */
export function instanceOfTemplatebackendSubstituteFieldRegexConfig(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TemplatebackendSubstituteFieldRegexConfigFromJSON(json: any): TemplatebackendSubstituteFieldRegexConfig {
    return TemplatebackendSubstituteFieldRegexConfigFromJSONTyped(json, false);
}

export function TemplatebackendSubstituteFieldRegexConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): TemplatebackendSubstituteFieldRegexConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'field': !exists(json, 'field') ? undefined : json['field'],
        'regex': !exists(json, 'regex') ? undefined : json['regex'],
        'replacement': !exists(json, 'replacement') ? undefined : json['replacement'],
    };
}

export function TemplatebackendSubstituteFieldRegexConfigToJSON(value?: TemplatebackendSubstituteFieldRegexConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'field': value.field,
        'regex': value.regex,
        'replacement': value.replacement,
    };
}

