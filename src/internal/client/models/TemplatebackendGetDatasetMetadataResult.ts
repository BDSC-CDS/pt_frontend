/* tslint:disable */
/* eslint-disable */
/**
 * pt backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: development.bdsc@chuv.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TemplatebackendMetadata } from './TemplatebackendMetadata';
import {
    TemplatebackendMetadataFromJSON,
    TemplatebackendMetadataFromJSONTyped,
    TemplatebackendMetadataToJSON,
} from './TemplatebackendMetadata';

/**
 * 
 * @export
 * @interface TemplatebackendGetDatasetMetadataResult
 */
export interface TemplatebackendGetDatasetMetadataResult {
    /**
     * 
     * @type {Array<TemplatebackendMetadata>}
     * @memberof TemplatebackendGetDatasetMetadataResult
     */
    metadata?: Array<TemplatebackendMetadata>;
}

/**
 * Check if a given object implements the TemplatebackendGetDatasetMetadataResult interface.
 */
export function instanceOfTemplatebackendGetDatasetMetadataResult(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TemplatebackendGetDatasetMetadataResultFromJSON(json: any): TemplatebackendGetDatasetMetadataResult {
    return TemplatebackendGetDatasetMetadataResultFromJSONTyped(json, false);
}

export function TemplatebackendGetDatasetMetadataResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): TemplatebackendGetDatasetMetadataResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'metadata': !exists(json, 'metadata') ? undefined : ((json['metadata'] as Array<any>).map(TemplatebackendMetadataFromJSON)),
    };
}

export function TemplatebackendGetDatasetMetadataResultToJSON(value?: TemplatebackendGetDatasetMetadataResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'metadata': value.metadata === undefined ? undefined : ((value.metadata as Array<any>).map(TemplatebackendMetadataToJSON)),
    };
}

