/* tslint:disable */
/* eslint-disable */
/**
 * pt backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: development.bdsc@chuv.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TemplatebackendQuestionnaireQuestionAnswer } from './TemplatebackendQuestionnaireQuestionAnswer';
import {
    TemplatebackendQuestionnaireQuestionAnswerFromJSON,
    TemplatebackendQuestionnaireQuestionAnswerFromJSONTyped,
    TemplatebackendQuestionnaireQuestionAnswerToJSON,
} from './TemplatebackendQuestionnaireQuestionAnswer';

/**
 * 
 * @export
 * @interface TemplatebackendQuestionnaireQuestion
 */
export interface TemplatebackendQuestionnaireQuestion {
    /**
     * 
     * @type {number}
     * @memberof TemplatebackendQuestionnaireQuestion
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendQuestionnaireQuestion
     */
    tab?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendQuestionnaireQuestion
     */
    question?: string;
    /**
     * 
     * @type {number}
     * @memberof TemplatebackendQuestionnaireQuestion
     */
    riskWeight?: number;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendQuestionnaireQuestion
     */
    answerType?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendQuestionnaireQuestion
     */
    flag?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendQuestionnaireQuestion
     */
    tooltip?: string;
    /**
     * 
     * @type {Array<TemplatebackendQuestionnaireQuestionAnswer>}
     * @memberof TemplatebackendQuestionnaireQuestion
     */
    answers?: Array<TemplatebackendQuestionnaireQuestionAnswer>;
    /**
     * 
     * @type {Date}
     * @memberof TemplatebackendQuestionnaireQuestion
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TemplatebackendQuestionnaireQuestion
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the TemplatebackendQuestionnaireQuestion interface.
 */
export function instanceOfTemplatebackendQuestionnaireQuestion(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TemplatebackendQuestionnaireQuestionFromJSON(json: any): TemplatebackendQuestionnaireQuestion {
    return TemplatebackendQuestionnaireQuestionFromJSONTyped(json, false);
}

export function TemplatebackendQuestionnaireQuestionFromJSONTyped(json: any, ignoreDiscriminator: boolean): TemplatebackendQuestionnaireQuestion {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'tab': !exists(json, 'tab') ? undefined : json['tab'],
        'question': !exists(json, 'question') ? undefined : json['question'],
        'riskWeight': !exists(json, 'riskWeight') ? undefined : json['riskWeight'],
        'answerType': !exists(json, 'answerType') ? undefined : json['answerType'],
        'flag': !exists(json, 'flag') ? undefined : json['flag'],
        'tooltip': !exists(json, 'tooltip') ? undefined : json['tooltip'],
        'answers': !exists(json, 'answers') ? undefined : ((json['answers'] as Array<any>).map(TemplatebackendQuestionnaireQuestionAnswerFromJSON)),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function TemplatebackendQuestionnaireQuestionToJSON(value?: TemplatebackendQuestionnaireQuestion | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'tab': value.tab,
        'question': value.question,
        'riskWeight': value.riskWeight,
        'answerType': value.answerType,
        'flag': value.flag,
        'tooltip': value.tooltip,
        'answers': value.answers === undefined ? undefined : ((value.answers as Array<any>).map(TemplatebackendQuestionnaireQuestionAnswerToJSON)),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

