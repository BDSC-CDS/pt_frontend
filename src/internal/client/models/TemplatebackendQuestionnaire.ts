/* tslint:disable */
/* eslint-disable */
/**
 * pt backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: development.bdsc@chuv.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TemplatebackendQuestionnaireVersion } from './TemplatebackendQuestionnaireVersion';
import {
    TemplatebackendQuestionnaireVersionFromJSON,
    TemplatebackendQuestionnaireVersionFromJSONTyped,
    TemplatebackendQuestionnaireVersionToJSON,
} from './TemplatebackendQuestionnaireVersion';

/**
 * 
 * @export
 * @interface TemplatebackendQuestionnaire
 */
export interface TemplatebackendQuestionnaire {
    /**
     * 
     * @type {number}
     * @memberof TemplatebackendQuestionnaire
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendQuestionnaire
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TemplatebackendQuestionnaire
     */
    replyEditable?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendQuestionnaire
     */
    lastVersion?: string;
    /**
     * 
     * @type {Array<TemplatebackendQuestionnaireVersion>}
     * @memberof TemplatebackendQuestionnaire
     */
    versions?: Array<TemplatebackendQuestionnaireVersion>;
    /**
     * 
     * @type {Date}
     * @memberof TemplatebackendQuestionnaire
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TemplatebackendQuestionnaire
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the TemplatebackendQuestionnaire interface.
 */
export function instanceOfTemplatebackendQuestionnaire(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TemplatebackendQuestionnaireFromJSON(json: any): TemplatebackendQuestionnaire {
    return TemplatebackendQuestionnaireFromJSONTyped(json, false);
}

export function TemplatebackendQuestionnaireFromJSONTyped(json: any, ignoreDiscriminator: boolean): TemplatebackendQuestionnaire {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'replyEditable': !exists(json, 'replyEditable') ? undefined : json['replyEditable'],
        'lastVersion': !exists(json, 'lastVersion') ? undefined : json['lastVersion'],
        'versions': !exists(json, 'versions') ? undefined : ((json['versions'] as Array<any>).map(TemplatebackendQuestionnaireVersionFromJSON)),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function TemplatebackendQuestionnaireToJSON(value?: TemplatebackendQuestionnaire | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'replyEditable': value.replyEditable,
        'lastVersion': value.lastVersion,
        'versions': value.versions === undefined ? undefined : ((value.versions as Array<any>).map(TemplatebackendQuestionnaireVersionToJSON)),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

