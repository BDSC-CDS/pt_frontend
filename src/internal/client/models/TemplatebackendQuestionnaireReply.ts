/* tslint:disable */
/* eslint-disable */
/**
 * pt backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: development.bdsc@chuv.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TemplatebackendQuestionnaireQuestionReply } from './TemplatebackendQuestionnaireQuestionReply';
import {
    TemplatebackendQuestionnaireQuestionReplyFromJSON,
    TemplatebackendQuestionnaireQuestionReplyFromJSONTyped,
    TemplatebackendQuestionnaireQuestionReplyToJSON,
} from './TemplatebackendQuestionnaireQuestionReply';

/**
 * 
 * @export
 * @interface TemplatebackendQuestionnaireReply
 */
export interface TemplatebackendQuestionnaireReply {
    /**
     * 
     * @type {number}
     * @memberof TemplatebackendQuestionnaireReply
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof TemplatebackendQuestionnaireReply
     */
    questionnaireVersionId?: number;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendQuestionnaireReply
     */
    projectName?: string;
    /**
     * 
     * @type {Array<TemplatebackendQuestionnaireQuestionReply>}
     * @memberof TemplatebackendQuestionnaireReply
     */
    replies?: Array<TemplatebackendQuestionnaireQuestionReply>;
    /**
     * 
     * @type {number}
     * @memberof TemplatebackendQuestionnaireReply
     */
    userId?: number;
    /**
     * 
     * @type {Date}
     * @memberof TemplatebackendQuestionnaireReply
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TemplatebackendQuestionnaireReply
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the TemplatebackendQuestionnaireReply interface.
 */
export function instanceOfTemplatebackendQuestionnaireReply(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TemplatebackendQuestionnaireReplyFromJSON(json: any): TemplatebackendQuestionnaireReply {
    return TemplatebackendQuestionnaireReplyFromJSONTyped(json, false);
}

export function TemplatebackendQuestionnaireReplyFromJSONTyped(json: any, ignoreDiscriminator: boolean): TemplatebackendQuestionnaireReply {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'questionnaireVersionId': !exists(json, 'questionnaireVersionId') ? undefined : json['questionnaireVersionId'],
        'projectName': !exists(json, 'projectName') ? undefined : json['projectName'],
        'replies': !exists(json, 'replies') ? undefined : ((json['replies'] as Array<any>).map(TemplatebackendQuestionnaireQuestionReplyFromJSON)),
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function TemplatebackendQuestionnaireReplyToJSON(value?: TemplatebackendQuestionnaireReply | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'questionnaireVersionId': value.questionnaireVersionId,
        'projectName': value.projectName,
        'replies': value.replies === undefined ? undefined : ((value.replies as Array<any>).map(TemplatebackendQuestionnaireQuestionReplyToJSON)),
        'userId': value.userId,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

