/* tslint:disable */
/* eslint-disable */
/**
 * pt backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: development.bdsc@chuv.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TemplatebackendDateShiftConfig } from './TemplatebackendDateShiftConfig';
import {
    TemplatebackendDateShiftConfigFromJSON,
    TemplatebackendDateShiftConfigFromJSONTyped,
    TemplatebackendDateShiftConfigToJSON,
} from './TemplatebackendDateShiftConfig';
import type { TemplatebackendScrambleFieldConfig } from './TemplatebackendScrambleFieldConfig';
import {
    TemplatebackendScrambleFieldConfigFromJSON,
    TemplatebackendScrambleFieldConfigFromJSONTyped,
    TemplatebackendScrambleFieldConfigToJSON,
} from './TemplatebackendScrambleFieldConfig';
import type { TemplatebackendSubstituteFieldListConfig } from './TemplatebackendSubstituteFieldListConfig';
import {
    TemplatebackendSubstituteFieldListConfigFromJSON,
    TemplatebackendSubstituteFieldListConfigFromJSONTyped,
    TemplatebackendSubstituteFieldListConfigToJSON,
} from './TemplatebackendSubstituteFieldListConfig';
import type { TemplatebackendSubstituteFieldRegexConfig } from './TemplatebackendSubstituteFieldRegexConfig';
import {
    TemplatebackendSubstituteFieldRegexConfigFromJSON,
    TemplatebackendSubstituteFieldRegexConfigFromJSONTyped,
    TemplatebackendSubstituteFieldRegexConfigToJSON,
} from './TemplatebackendSubstituteFieldRegexConfig';

/**
 * 
 * @export
 * @interface TemplatebackendTransformConfig
 */
export interface TemplatebackendTransformConfig {
    /**
     * 
     * @type {number}
     * @memberof TemplatebackendTransformConfig
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof TemplatebackendTransformConfig
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof TemplatebackendTransformConfig
     */
    userid?: number;
    /**
     * 
     * @type {number}
     * @memberof TemplatebackendTransformConfig
     */
    tenantid?: number;
    /**
     * 
     * @type {number}
     * @memberof TemplatebackendTransformConfig
     */
    questionnaireid?: number;
    /**
     * 
     * @type {TemplatebackendDateShiftConfig}
     * @memberof TemplatebackendTransformConfig
     */
    dateShift?: TemplatebackendDateShiftConfig;
    /**
     * 
     * @type {TemplatebackendScrambleFieldConfig}
     * @memberof TemplatebackendTransformConfig
     */
    scrambleField?: TemplatebackendScrambleFieldConfig;
    /**
     * 
     * @type {Array<TemplatebackendSubstituteFieldListConfig>}
     * @memberof TemplatebackendTransformConfig
     */
    subFieldListList?: Array<TemplatebackendSubstituteFieldListConfig>;
    /**
     * 
     * @type {Array<TemplatebackendSubstituteFieldRegexConfig>}
     * @memberof TemplatebackendTransformConfig
     */
    subFieldRegexList?: Array<TemplatebackendSubstituteFieldRegexConfig>;
    /**
     * 
     * @type {Date}
     * @memberof TemplatebackendTransformConfig
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TemplatebackendTransformConfig
     */
    deletedAt?: Date;
}

/**
 * Check if a given object implements the TemplatebackendTransformConfig interface.
 */
export function instanceOfTemplatebackendTransformConfig(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TemplatebackendTransformConfigFromJSON(json: any): TemplatebackendTransformConfig {
    return TemplatebackendTransformConfigFromJSONTyped(json, false);
}

export function TemplatebackendTransformConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): TemplatebackendTransformConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'userid': !exists(json, 'userid') ? undefined : json['userid'],
        'tenantid': !exists(json, 'tenantid') ? undefined : json['tenantid'],
        'questionnaireid': !exists(json, 'questionnaireid') ? undefined : json['questionnaireid'],
        'dateShift': !exists(json, 'dateShift') ? undefined : TemplatebackendDateShiftConfigFromJSON(json['dateShift']),
        'scrambleField': !exists(json, 'scrambleField') ? undefined : TemplatebackendScrambleFieldConfigFromJSON(json['scrambleField']),
        'subFieldListList': !exists(json, 'subFieldListList') ? undefined : ((json['subFieldListList'] as Array<any>).map(TemplatebackendSubstituteFieldListConfigFromJSON)),
        'subFieldRegexList': !exists(json, 'subFieldRegexList') ? undefined : ((json['subFieldRegexList'] as Array<any>).map(TemplatebackendSubstituteFieldRegexConfigFromJSON)),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'deletedAt': !exists(json, 'deletedAt') ? undefined : (new Date(json['deletedAt'])),
    };
}

export function TemplatebackendTransformConfigToJSON(value?: TemplatebackendTransformConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'userid': value.userid,
        'tenantid': value.tenantid,
        'questionnaireid': value.questionnaireid,
        'dateShift': TemplatebackendDateShiftConfigToJSON(value.dateShift),
        'scrambleField': TemplatebackendScrambleFieldConfigToJSON(value.scrambleField),
        'subFieldListList': value.subFieldListList === undefined ? undefined : ((value.subFieldListList as Array<any>).map(TemplatebackendSubstituteFieldListConfigToJSON)),
        'subFieldRegexList': value.subFieldRegexList === undefined ? undefined : ((value.subFieldRegexList as Array<any>).map(TemplatebackendSubstituteFieldRegexConfigToJSON)),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'deletedAt': value.deletedAt === undefined ? undefined : (value.deletedAt.toISOString()),
    };
}

