/* tslint:disable */
/* eslint-disable */
/**
 * pt backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: development.bdsc@chuv.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcStatus,
  TemplatebackendChangeTypesDatasetReply,
  TemplatebackendChangeTypesDatasetRequest,
  TemplatebackendDeleteDatasetReply,
  TemplatebackendGetDatasetContentReply,
  TemplatebackendGetDatasetInfoReply,
  TemplatebackendGetDatasetMetadataReply,
  TemplatebackendListDatasetsReply,
  TemplatebackendRevertDatasetReply,
  TemplatebackendRevertDatasetRequest,
  TemplatebackendStoreDatasetReply,
  TemplatebackendStoreDatasetRequest,
  TemplatebackendTransformDatasetReply,
  TemplatebackendTransformDatasetRequest,
} from '../models/index';
import {
    RpcStatusFromJSON,
    RpcStatusToJSON,
    TemplatebackendChangeTypesDatasetReplyFromJSON,
    TemplatebackendChangeTypesDatasetReplyToJSON,
    TemplatebackendChangeTypesDatasetRequestFromJSON,
    TemplatebackendChangeTypesDatasetRequestToJSON,
    TemplatebackendDeleteDatasetReplyFromJSON,
    TemplatebackendDeleteDatasetReplyToJSON,
    TemplatebackendGetDatasetContentReplyFromJSON,
    TemplatebackendGetDatasetContentReplyToJSON,
    TemplatebackendGetDatasetInfoReplyFromJSON,
    TemplatebackendGetDatasetInfoReplyToJSON,
    TemplatebackendGetDatasetMetadataReplyFromJSON,
    TemplatebackendGetDatasetMetadataReplyToJSON,
    TemplatebackendListDatasetsReplyFromJSON,
    TemplatebackendListDatasetsReplyToJSON,
    TemplatebackendRevertDatasetReplyFromJSON,
    TemplatebackendRevertDatasetReplyToJSON,
    TemplatebackendRevertDatasetRequestFromJSON,
    TemplatebackendRevertDatasetRequestToJSON,
    TemplatebackendStoreDatasetReplyFromJSON,
    TemplatebackendStoreDatasetReplyToJSON,
    TemplatebackendStoreDatasetRequestFromJSON,
    TemplatebackendStoreDatasetRequestToJSON,
    TemplatebackendTransformDatasetReplyFromJSON,
    TemplatebackendTransformDatasetReplyToJSON,
    TemplatebackendTransformDatasetRequestFromJSON,
    TemplatebackendTransformDatasetRequestToJSON,
} from '../models/index';

export interface DatasetServiceChangeTypesDatasetRequest {
    body: TemplatebackendChangeTypesDatasetRequest;
}

export interface DatasetServiceDeleteDatasetRequest {
    id: number;
}

export interface DatasetServiceGetDatasetContentRequest {
    id: number;
    offset?: number;
    limit?: number;
}

export interface DatasetServiceGetDatasetIdentifierRequest {
    id: number;
    offset?: number;
    limit?: number;
}

export interface DatasetServiceGetDatasetInfoRequest {
    id: number;
}

export interface DatasetServiceGetDatasetMetadataRequest {
    id: number;
}

export interface DatasetServiceListDatasetsRequest {
    offset?: number;
    limit?: number;
}

export interface DatasetServiceRevertDatasetRequest {
    body: TemplatebackendRevertDatasetRequest;
}

export interface DatasetServiceStoreDatasetRequest {
    body: TemplatebackendStoreDatasetRequest;
}

export interface DatasetServiceTransformDatasetRequest {
    body: TemplatebackendTransformDatasetRequest;
}

/**
 * 
 */
export class DatasetApi extends runtime.BaseAPI {

    /**
     * This endpoint changes the types of a dataset
     * Change the types of a dataset
     */
    async datasetServiceChangeTypesDatasetRaw(requestParameters: DatasetServiceChangeTypesDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendChangeTypesDatasetReply>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling datasetServiceChangeTypesDataset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/dataset/types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplatebackendChangeTypesDatasetRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendChangeTypesDatasetReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint changes the types of a dataset
     * Change the types of a dataset
     */
    async datasetServiceChangeTypesDataset(requestParameters: DatasetServiceChangeTypesDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendChangeTypesDatasetReply> {
        const response = await this.datasetServiceChangeTypesDatasetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint deletes a dataset
     * Deletes a dataset
     */
    async datasetServiceDeleteDatasetRaw(requestParameters: DatasetServiceDeleteDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendDeleteDatasetReply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling datasetServiceDeleteDataset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/dataset/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendDeleteDatasetReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint deletes a dataset
     * Deletes a dataset
     */
    async datasetServiceDeleteDataset(requestParameters: DatasetServiceDeleteDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendDeleteDatasetReply> {
        const response = await this.datasetServiceDeleteDatasetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allow getting a specific user\'s Dataset Content
     * Get Dataset Content
     */
    async datasetServiceGetDatasetContentRaw(requestParameters: DatasetServiceGetDatasetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendGetDatasetContentReply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling datasetServiceGetDatasetContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/dataset/content/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendGetDatasetContentReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint allow getting a specific user\'s Dataset Content
     * Get Dataset Content
     */
    async datasetServiceGetDatasetContent(requestParameters: DatasetServiceGetDatasetContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendGetDatasetContentReply> {
        const response = await this.datasetServiceGetDatasetContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allow getting a specific user\'s Dataset Content filtered by identifying and quasi identifying columns
     * Get Dataset Content filtered by identifying and quasi identifying columns
     */
    async datasetServiceGetDatasetIdentifierRaw(requestParameters: DatasetServiceGetDatasetIdentifierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendGetDatasetContentReply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling datasetServiceGetDatasetIdentifier.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/dataset/identifier/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendGetDatasetContentReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint allow getting a specific user\'s Dataset Content filtered by identifying and quasi identifying columns
     * Get Dataset Content filtered by identifying and quasi identifying columns
     */
    async datasetServiceGetDatasetIdentifier(requestParameters: DatasetServiceGetDatasetIdentifierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendGetDatasetContentReply> {
        const response = await this.datasetServiceGetDatasetIdentifierRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allow getting a specific user\'s Dataset info
     * Get Dataset Info
     */
    async datasetServiceGetDatasetInfoRaw(requestParameters: DatasetServiceGetDatasetInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendGetDatasetInfoReply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling datasetServiceGetDatasetInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/dataset/info/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendGetDatasetInfoReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint allow getting a specific user\'s Dataset info
     * Get Dataset Info
     */
    async datasetServiceGetDatasetInfo(requestParameters: DatasetServiceGetDatasetInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendGetDatasetInfoReply> {
        const response = await this.datasetServiceGetDatasetInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allow getting a specific user\'s Dataset Metadata
     * Get Dataset Metadata
     */
    async datasetServiceGetDatasetMetadataRaw(requestParameters: DatasetServiceGetDatasetMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendGetDatasetMetadataReply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling datasetServiceGetDatasetMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/dataset/metadata/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendGetDatasetMetadataReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint allow getting a specific user\'s Dataset Metadata
     * Get Dataset Metadata
     */
    async datasetServiceGetDatasetMetadata(requestParameters: DatasetServiceGetDatasetMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendGetDatasetMetadataReply> {
        const response = await this.datasetServiceGetDatasetMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows listing a user\'s datasets
     * List datasets
     */
    async datasetServiceListDatasetsRaw(requestParameters: DatasetServiceListDatasetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendListDatasetsReply>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/dataset`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendListDatasetsReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint allows listing a user\'s datasets
     * List datasets
     */
    async datasetServiceListDatasets(requestParameters: DatasetServiceListDatasetsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendListDatasetsReply> {
        const response = await this.datasetServiceListDatasetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint reverts a dataset
     * Revert a dataset
     */
    async datasetServiceRevertDatasetRaw(requestParameters: DatasetServiceRevertDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendRevertDatasetReply>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling datasetServiceRevertDataset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/dataset/revert`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplatebackendRevertDatasetRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendRevertDatasetReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint reverts a dataset
     * Revert a dataset
     */
    async datasetServiceRevertDataset(requestParameters: DatasetServiceRevertDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendRevertDatasetReply> {
        const response = await this.datasetServiceRevertDatasetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint stores a dataset
     * Store a dataset
     */
    async datasetServiceStoreDatasetRaw(requestParameters: DatasetServiceStoreDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendStoreDatasetReply>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling datasetServiceStoreDataset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/dataset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplatebackendStoreDatasetRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendStoreDatasetReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint stores a dataset
     * Store a dataset
     */
    async datasetServiceStoreDataset(requestParameters: DatasetServiceStoreDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendStoreDatasetReply> {
        const response = await this.datasetServiceStoreDatasetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint transforms a dataset
     * Transform a dataset
     */
    async datasetServiceTransformDatasetRaw(requestParameters: DatasetServiceTransformDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendTransformDatasetReply>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling datasetServiceTransformDataset.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/dataset/transform`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplatebackendTransformDatasetRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendTransformDatasetReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint transforms a dataset
     * Transform a dataset
     */
    async datasetServiceTransformDataset(requestParameters: DatasetServiceTransformDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendTransformDatasetReply> {
        const response = await this.datasetServiceTransformDatasetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
