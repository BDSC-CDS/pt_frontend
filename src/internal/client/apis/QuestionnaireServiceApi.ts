/* tslint:disable */
/* eslint-disable */
/**
 * pt backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: development.bdsc@chuv.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  QuestionnaireServiceShareReplyRequest,
  RpcStatus,
  TemplatebackendCreateQuestionnaireReply,
  TemplatebackendCreateQuestionnaireRequest,
  TemplatebackendCreateQuestionnaireVersionReply,
  TemplatebackendCreateQuestionnaireVersionRequest,
  TemplatebackendCreateReplyReply,
  TemplatebackendCreateReplyRequest,
  TemplatebackendDeleteQuestionnaireReply,
  TemplatebackendGetQuestionnaireReply,
  TemplatebackendGetReplyReply,
  TemplatebackendListQuestionnaireReply,
  TemplatebackendListRepliesReply,
  TemplatebackendShareReplyReply,
} from '../models/index';
import {
    QuestionnaireServiceShareReplyRequestFromJSON,
    QuestionnaireServiceShareReplyRequestToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
    TemplatebackendCreateQuestionnaireReplyFromJSON,
    TemplatebackendCreateQuestionnaireReplyToJSON,
    TemplatebackendCreateQuestionnaireRequestFromJSON,
    TemplatebackendCreateQuestionnaireRequestToJSON,
    TemplatebackendCreateQuestionnaireVersionReplyFromJSON,
    TemplatebackendCreateQuestionnaireVersionReplyToJSON,
    TemplatebackendCreateQuestionnaireVersionRequestFromJSON,
    TemplatebackendCreateQuestionnaireVersionRequestToJSON,
    TemplatebackendCreateReplyReplyFromJSON,
    TemplatebackendCreateReplyReplyToJSON,
    TemplatebackendCreateReplyRequestFromJSON,
    TemplatebackendCreateReplyRequestToJSON,
    TemplatebackendDeleteQuestionnaireReplyFromJSON,
    TemplatebackendDeleteQuestionnaireReplyToJSON,
    TemplatebackendGetQuestionnaireReplyFromJSON,
    TemplatebackendGetQuestionnaireReplyToJSON,
    TemplatebackendGetReplyReplyFromJSON,
    TemplatebackendGetReplyReplyToJSON,
    TemplatebackendListQuestionnaireReplyFromJSON,
    TemplatebackendListQuestionnaireReplyToJSON,
    TemplatebackendListRepliesReplyFromJSON,
    TemplatebackendListRepliesReplyToJSON,
    TemplatebackendShareReplyReplyFromJSON,
    TemplatebackendShareReplyReplyToJSON,
} from '../models/index';

export interface QuestionnaireServiceCreateQuestionnaireRequest {
    body: TemplatebackendCreateQuestionnaireRequest;
}

export interface QuestionnaireServiceCreateQuestionnaireVersionRequest {
    body: TemplatebackendCreateQuestionnaireVersionRequest;
}

export interface QuestionnaireServiceCreateReplyRequest {
    body: TemplatebackendCreateReplyRequest;
}

export interface QuestionnaireServiceDeleteQuestionnaireRequest {
    id: string;
}

export interface QuestionnaireServiceGetQuestionnaireRequest {
    id: number;
}

export interface QuestionnaireServiceGetReplyRequest {
    id: number;
}

export interface QuestionnaireServiceListQuestionnaireRequest {
    offset?: number;
    limit?: number;
}

export interface QuestionnaireServiceListRepliesRequest {
    offset?: number;
    limit?: number;
}

export interface QuestionnaireServiceShareReplyOperationRequest {
    id: number;
    body: QuestionnaireServiceShareReplyRequest;
}

/**
 * 
 */
export class QuestionnaireServiceApi extends runtime.BaseAPI {

    /**
     * This endpoint creates a questionnaire
     * Create a questionnaire
     */
    async questionnaireServiceCreateQuestionnaireRaw(requestParameters: QuestionnaireServiceCreateQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendCreateQuestionnaireReply>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling questionnaireServiceCreateQuestionnaire.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/questionnaire`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplatebackendCreateQuestionnaireRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendCreateQuestionnaireReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint creates a questionnaire
     * Create a questionnaire
     */
    async questionnaireServiceCreateQuestionnaire(requestParameters: QuestionnaireServiceCreateQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendCreateQuestionnaireReply> {
        const response = await this.questionnaireServiceCreateQuestionnaireRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint creates a questionnaire version
     * Create a questionnaire version
     */
    async questionnaireServiceCreateQuestionnaireVersionRaw(requestParameters: QuestionnaireServiceCreateQuestionnaireVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendCreateQuestionnaireVersionReply>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling questionnaireServiceCreateQuestionnaireVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/questionnaire/version`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplatebackendCreateQuestionnaireVersionRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendCreateQuestionnaireVersionReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint creates a questionnaire version
     * Create a questionnaire version
     */
    async questionnaireServiceCreateQuestionnaireVersion(requestParameters: QuestionnaireServiceCreateQuestionnaireVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendCreateQuestionnaireVersionReply> {
        const response = await this.questionnaireServiceCreateQuestionnaireVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows ceating a user\'s questionnaires reply
     * Create questionnaires reply
     */
    async questionnaireServiceCreateReplyRaw(requestParameters: QuestionnaireServiceCreateReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendCreateReplyReply>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling questionnaireServiceCreateReply.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/questionnaire/replies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplatebackendCreateReplyRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendCreateReplyReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint allows ceating a user\'s questionnaires reply
     * Create questionnaires reply
     */
    async questionnaireServiceCreateReply(requestParameters: QuestionnaireServiceCreateReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendCreateReplyReply> {
        const response = await this.questionnaireServiceCreateReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint creates a questionnaire
     * Create a questionnaire
     */
    async questionnaireServiceDeleteQuestionnaireRaw(requestParameters: QuestionnaireServiceDeleteQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendDeleteQuestionnaireReply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling questionnaireServiceDeleteQuestionnaire.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/questionnaire/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendDeleteQuestionnaireReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint creates a questionnaire
     * Create a questionnaire
     */
    async questionnaireServiceDeleteQuestionnaire(requestParameters: QuestionnaireServiceDeleteQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendDeleteQuestionnaireReply> {
        const response = await this.questionnaireServiceDeleteQuestionnaireRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allow getting a single user\'s questionnaire
     * Get questionnaires
     */
    async questionnaireServiceGetQuestionnaireRaw(requestParameters: QuestionnaireServiceGetQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendGetQuestionnaireReply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling questionnaireServiceGetQuestionnaire.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/questionnaire/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendGetQuestionnaireReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint allow getting a single user\'s questionnaire
     * Get questionnaires
     */
    async questionnaireServiceGetQuestionnaire(requestParameters: QuestionnaireServiceGetQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendGetQuestionnaireReply> {
        const response = await this.questionnaireServiceGetQuestionnaireRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows getting a user\'s questionnaires reply
     * Get a questionnaires reply
     */
    async questionnaireServiceGetReplyRaw(requestParameters: QuestionnaireServiceGetReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendGetReplyReply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling questionnaireServiceGetReply.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/questionnaire/replies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendGetReplyReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint allows getting a user\'s questionnaires reply
     * Get a questionnaires reply
     */
    async questionnaireServiceGetReply(requestParameters: QuestionnaireServiceGetReplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendGetReplyReply> {
        const response = await this.questionnaireServiceGetReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows listing a user\'s questionnaires
     * List questionnaires
     */
    async questionnaireServiceListQuestionnaireRaw(requestParameters: QuestionnaireServiceListQuestionnaireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendListQuestionnaireReply>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/questionnaire`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendListQuestionnaireReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint allows listing a user\'s questionnaires
     * List questionnaires
     */
    async questionnaireServiceListQuestionnaire(requestParameters: QuestionnaireServiceListQuestionnaireRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendListQuestionnaireReply> {
        const response = await this.questionnaireServiceListQuestionnaireRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows listing a user\'s questionnaires replies
     * List questionnaires replies
     */
    async questionnaireServiceListRepliesRaw(requestParameters: QuestionnaireServiceListRepliesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendListRepliesReply>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/questionnaire/replies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendListRepliesReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint allows listing a user\'s questionnaires replies
     * List questionnaires replies
     */
    async questionnaireServiceListReplies(requestParameters: QuestionnaireServiceListRepliesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendListRepliesReply> {
        const response = await this.questionnaireServiceListRepliesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows sharing a user\'s questionnaires reply
     * Share questionnaires reply
     */
    async questionnaireServiceShareReplyRaw(requestParameters: QuestionnaireServiceShareReplyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendShareReplyReply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling questionnaireServiceShareReply.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling questionnaireServiceShareReply.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/questionnaire/replies/{id}/share`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionnaireServiceShareReplyRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendShareReplyReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint allows sharing a user\'s questionnaires reply
     * Share questionnaires reply
     */
    async questionnaireServiceShareReply(requestParameters: QuestionnaireServiceShareReplyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendShareReplyReply> {
        const response = await this.questionnaireServiceShareReplyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
