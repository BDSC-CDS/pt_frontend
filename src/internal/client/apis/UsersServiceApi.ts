/* tslint:disable */
/* eslint-disable */
/**
 * pt backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: development.bdsc@chuv.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcStatus,
  TemplatebackendCreateUserReply,
  TemplatebackendDeleteUserReply,
  TemplatebackendGetUserMeReply,
  TemplatebackendGetUserReply,
  TemplatebackendResetPasswordReply,
  TemplatebackendSearchUsersReply,
  TemplatebackendSearchUsersRequest,
  TemplatebackendUpdatePasswordReply,
  TemplatebackendUpdatePasswordRequest,
  TemplatebackendUser,
} from '../models/index';
import {
    RpcStatusFromJSON,
    RpcStatusToJSON,
    TemplatebackendCreateUserReplyFromJSON,
    TemplatebackendCreateUserReplyToJSON,
    TemplatebackendDeleteUserReplyFromJSON,
    TemplatebackendDeleteUserReplyToJSON,
    TemplatebackendGetUserMeReplyFromJSON,
    TemplatebackendGetUserMeReplyToJSON,
    TemplatebackendGetUserReplyFromJSON,
    TemplatebackendGetUserReplyToJSON,
    TemplatebackendResetPasswordReplyFromJSON,
    TemplatebackendResetPasswordReplyToJSON,
    TemplatebackendSearchUsersReplyFromJSON,
    TemplatebackendSearchUsersReplyToJSON,
    TemplatebackendSearchUsersRequestFromJSON,
    TemplatebackendSearchUsersRequestToJSON,
    TemplatebackendUpdatePasswordReplyFromJSON,
    TemplatebackendUpdatePasswordReplyToJSON,
    TemplatebackendUpdatePasswordRequestFromJSON,
    TemplatebackendUpdatePasswordRequestToJSON,
    TemplatebackendUserFromJSON,
    TemplatebackendUserToJSON,
} from '../models/index';

export interface UsersServiceCreateUserRequest {
    body: TemplatebackendUser;
}

export interface UsersServiceDeleteUserRequest {
    id: number;
}

export interface UsersServiceGetUserRequest {
    id: number;
}

export interface UsersServiceResetPasswordRequest {
    id: number;
    body: object;
}

export interface UsersServiceSearchUsersRequest {
    body: TemplatebackendSearchUsersRequest;
}

export interface UsersServiceUpdatePasswordRequest {
    body: TemplatebackendUpdatePasswordRequest;
}

/**
 * 
 */
export class UsersServiceApi extends runtime.BaseAPI {

    /**
     * This endpoint creates a user
     * Create a user
     */
    async usersServiceCreateUserRaw(requestParameters: UsersServiceCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendCreateUserReply>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling usersServiceCreateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/rest/v1/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplatebackendUserToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendCreateUserReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint creates a user
     * Create a user
     */
    async usersServiceCreateUser(requestParameters: UsersServiceCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendCreateUserReply> {
        const response = await this.usersServiceCreateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint deletes a user
     * Delete a user
     */
    async usersServiceDeleteUserRaw(requestParameters: UsersServiceDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendDeleteUserReply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersServiceDeleteUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/rest/v1/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendDeleteUserReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint deletes a user
     * Delete a user
     */
    async usersServiceDeleteUser(requestParameters: UsersServiceDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendDeleteUserReply> {
        const response = await this.usersServiceDeleteUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns a user
     * Get a user
     */
    async usersServiceGetUserRaw(requestParameters: UsersServiceGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendGetUserReply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersServiceGetUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/rest/v1/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendGetUserReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint returns a user
     * Get a user
     */
    async usersServiceGetUser(requestParameters: UsersServiceGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendGetUserReply> {
        const response = await this.usersServiceGetUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the details of the authenticated user
     * Get my own user
     */
    async usersServiceGetUserMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendGetUserMeReply>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/rest/v1/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendGetUserMeReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the details of the authenticated user
     * Get my own user
     */
    async usersServiceGetUserMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendGetUserMeReply> {
        const response = await this.usersServiceGetUserMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * This endpoint resets a user\'s password
     * Reset password
     */
    async usersServiceResetPasswordRaw(requestParameters: UsersServiceResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendResetPasswordReply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersServiceResetPassword.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling usersServiceResetPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/rest/v1/users/{id}/password/reset`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendResetPasswordReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint resets a user\'s password
     * Reset password
     */
    async usersServiceResetPassword(requestParameters: UsersServiceResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendResetPasswordReply> {
        const response = await this.usersServiceResetPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint searches for users
     * Search users
     */
    async usersServiceSearchUsersRaw(requestParameters: UsersServiceSearchUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendSearchUsersReply>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling usersServiceSearchUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/rest/v1/users/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplatebackendSearchUsersRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendSearchUsersReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint searches for users
     * Search users
     */
    async usersServiceSearchUsers(requestParameters: UsersServiceSearchUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendSearchUsersReply> {
        const response = await this.usersServiceSearchUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint updates the password of the authenticated user
     * Update password
     */
    async usersServiceUpdatePasswordRaw(requestParameters: UsersServiceUpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendUpdatePasswordReply>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling usersServiceUpdatePassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/rest/v1/users/me/password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplatebackendUpdatePasswordRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendUpdatePasswordReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint updates the password of the authenticated user
     * Update password
     */
    async usersServiceUpdatePassword(requestParameters: UsersServiceUpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendUpdatePasswordReply> {
        const response = await this.usersServiceUpdatePasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
