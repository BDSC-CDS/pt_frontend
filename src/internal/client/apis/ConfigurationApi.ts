/* tslint:disable */
/* eslint-disable */
/**
 * pt backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: development.bdsc@chuv.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcStatus,
  TemplatebackendConfig,
  TemplatebackendCreateConfigReply,
  TemplatebackendGetConfigsReply,
} from '../models/index';
import {
    RpcStatusFromJSON,
    RpcStatusToJSON,
    TemplatebackendConfigFromJSON,
    TemplatebackendConfigToJSON,
    TemplatebackendCreateConfigReplyFromJSON,
    TemplatebackendCreateConfigReplyToJSON,
    TemplatebackendGetConfigsReplyFromJSON,
    TemplatebackendGetConfigsReplyToJSON,
} from '../models/index';

export interface ConfigServiceCreateConfigRequest {
    body: TemplatebackendConfig;
}

/**
 * 
 */
export class ConfigurationApi extends runtime.BaseAPI {

    /**
     * This endpoint creates a usconfigurationer
     * Create a configuration
     */
    async configServiceCreateConfigRaw(requestParameters: ConfigServiceCreateConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendCreateConfigReply>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling configServiceCreateConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/rest/v1/configs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplatebackendConfigToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendCreateConfigReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint creates a usconfigurationer
     * Create a configuration
     */
    async configServiceCreateConfig(requestParameters: ConfigServiceCreateConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendCreateConfigReply> {
        const response = await this.configServiceCreateConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the configuration files for a given user
     * Get configuration files
     */
    async configServiceGetConfigsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendGetConfigsReply>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/rest/v1/configs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendGetConfigsReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the configuration files for a given user
     * Get configuration files
     */
    async configServiceGetConfigs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendGetConfigsReply> {
        const response = await this.configServiceGetConfigsRaw(initOverrides);
        return await response.value();
    }

}
