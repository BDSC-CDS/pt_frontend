/* tslint:disable */
/* eslint-disable */
/**
 * pt backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: development.bdsc@chuv.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiHttpBody,
  RpcStatus,
  TemplatebackendCreateTransformConfigReply,
  TemplatebackendCreateTransformConfigRequest,
  TemplatebackendDeleteTransformConfigReply,
  TemplatebackendExportTransformConfigReply,
  TemplatebackendListTransformConfigsReply,
} from '../models/index';
import {
    ApiHttpBodyFromJSON,
    ApiHttpBodyToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
    TemplatebackendCreateTransformConfigReplyFromJSON,
    TemplatebackendCreateTransformConfigReplyToJSON,
    TemplatebackendCreateTransformConfigRequestFromJSON,
    TemplatebackendCreateTransformConfigRequestToJSON,
    TemplatebackendDeleteTransformConfigReplyFromJSON,
    TemplatebackendDeleteTransformConfigReplyToJSON,
    TemplatebackendExportTransformConfigReplyFromJSON,
    TemplatebackendExportTransformConfigReplyToJSON,
    TemplatebackendListTransformConfigsReplyFromJSON,
    TemplatebackendListTransformConfigsReplyToJSON,
} from '../models/index';

export interface TransformConfigServiceCreateTransformConfigRequest {
    body: TemplatebackendCreateTransformConfigRequest;
}

export interface TransformConfigServiceDeleteTransformConfigRequest {
    id: number;
}

export interface TransformConfigServiceExportTransformConfigRequest {
    id: number;
}

export interface TransformConfigServiceExportTransformConfigJSONRequest {
    id: number;
}

export interface TransformConfigServiceListTransformConfigsRequest {
    offset?: number;
    limit?: number;
}

/**
 * 
 */
export class TransformConfigServiceApi extends runtime.BaseAPI {

    /**
     * This endpoint creates a dataset transform configuration
     * Create a transform configuration
     */
    async transformConfigServiceCreateTransformConfigRaw(requestParameters: TransformConfigServiceCreateTransformConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendCreateTransformConfigReply>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling transformConfigServiceCreateTransformConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/transform-config`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplatebackendCreateTransformConfigRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendCreateTransformConfigReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint creates a dataset transform configuration
     * Create a transform configuration
     */
    async transformConfigServiceCreateTransformConfig(requestParameters: TransformConfigServiceCreateTransformConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendCreateTransformConfigReply> {
        const response = await this.transformConfigServiceCreateTransformConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint deletes a dataset transform configuration
     * Delete transform configuration
     */
    async transformConfigServiceDeleteTransformConfigRaw(requestParameters: TransformConfigServiceDeleteTransformConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendDeleteTransformConfigReply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling transformConfigServiceDeleteTransformConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/transform-config/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendDeleteTransformConfigReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint deletes a dataset transform configuration
     * Delete transform configuration
     */
    async transformConfigServiceDeleteTransformConfig(requestParameters: TransformConfigServiceDeleteTransformConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendDeleteTransformConfigReply> {
        const response = await this.transformConfigServiceDeleteTransformConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns a JSON string of a transform configuration (SPHN Connector format)
     * Export transform configuration as a string
     */
    async transformConfigServiceExportTransformConfigRaw(requestParameters: TransformConfigServiceExportTransformConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendExportTransformConfigReply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling transformConfigServiceExportTransformConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/transform-config/export/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendExportTransformConfigReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint returns a JSON string of a transform configuration (SPHN Connector format)
     * Export transform configuration as a string
     */
    async transformConfigServiceExportTransformConfig(requestParameters: TransformConfigServiceExportTransformConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendExportTransformConfigReply> {
        const response = await this.transformConfigServiceExportTransformConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns a JSON file of a transform configuration (SPHN Connector format)
     * Export transform configuration as a JSON file 
     */
    async transformConfigServiceExportTransformConfigJSONRaw(requestParameters: TransformConfigServiceExportTransformConfigJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiHttpBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling transformConfigServiceExportTransformConfigJSON.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/transform-config/export/json/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiHttpBodyFromJSON(jsonValue));
    }

    /**
     * This endpoint returns a JSON file of a transform configuration (SPHN Connector format)
     * Export transform configuration as a JSON file 
     */
    async transformConfigServiceExportTransformConfigJSON(requestParameters: TransformConfigServiceExportTransformConfigJSONRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiHttpBody> {
        const response = await this.transformConfigServiceExportTransformConfigJSONRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint allows listing a user\'s dataset transform configurations
     * List transform configurations
     */
    async transformConfigServiceListTransformConfigsRaw(requestParameters: TransformConfigServiceListTransformConfigsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendListTransformConfigsReply>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/transform-config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendListTransformConfigsReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint allows listing a user\'s dataset transform configurations
     * List transform configurations
     */
    async transformConfigServiceListTransformConfigs(requestParameters: TransformConfigServiceListTransformConfigsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendListTransformConfigsReply> {
        const response = await this.transformConfigServiceListTransformConfigsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
