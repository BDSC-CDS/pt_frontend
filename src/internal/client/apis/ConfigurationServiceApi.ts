/* tslint:disable */
/* eslint-disable */
/**
 * pt backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: development.bdsc@chuv.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcStatus,
  TemplatebackendConfig,
  TemplatebackendCreateConfigReply,
  TemplatebackendDeleteConfigReply,
  TemplatebackendExportConfigReply,
  TemplatebackendGetConfigsReply,
} from '../models/index';
import {
    RpcStatusFromJSON,
    RpcStatusToJSON,
    TemplatebackendConfigFromJSON,
    TemplatebackendConfigToJSON,
    TemplatebackendCreateConfigReplyFromJSON,
    TemplatebackendCreateConfigReplyToJSON,
    TemplatebackendDeleteConfigReplyFromJSON,
    TemplatebackendDeleteConfigReplyToJSON,
    TemplatebackendExportConfigReplyFromJSON,
    TemplatebackendExportConfigReplyToJSON,
    TemplatebackendGetConfigsReplyFromJSON,
    TemplatebackendGetConfigsReplyToJSON,
} from '../models/index';

export interface ConfigurationServiceCreateConfigRequest {
    body: TemplatebackendConfig;
}

export interface ConfigurationServiceDeleteConfigRequest {
    id: number;
}

export interface ConfigurationServiceExportConfigRequest {
    id: number;
}

/**
 * 
 */
export class ConfigurationServiceApi extends runtime.BaseAPI {

    /**
     * This endpoint creates a usconfigurationer
     * Create a configuration
     */
    async configurationServiceCreateConfigRaw(requestParameters: ConfigurationServiceCreateConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendCreateConfigReply>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling configurationServiceCreateConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/rest/v1/configs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplatebackendConfigToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendCreateConfigReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint creates a usconfigurationer
     * Create a configuration
     */
    async configurationServiceCreateConfig(requestParameters: ConfigurationServiceCreateConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendCreateConfigReply> {
        const response = await this.configurationServiceCreateConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint deletes a config
     * Deletes a config
     */
    async configurationServiceDeleteConfigRaw(requestParameters: ConfigurationServiceDeleteConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendDeleteConfigReply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling configurationServiceDeleteConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/config/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendDeleteConfigReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint deletes a config
     * Deletes a config
     */
    async configurationServiceDeleteConfig(requestParameters: ConfigurationServiceDeleteConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendDeleteConfigReply> {
        const response = await this.configurationServiceDeleteConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the JSON of a configuration
     * Export a configuration as json (SPHN Connector format)
     */
    async configurationServiceExportConfigRaw(requestParameters: ConfigurationServiceExportConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendExportConfigReply>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling configurationServiceExportConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/rest/v1/config/export/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendExportConfigReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the JSON of a configuration
     * Export a configuration as json (SPHN Connector format)
     */
    async configurationServiceExportConfig(requestParameters: ConfigurationServiceExportConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendExportConfigReply> {
        const response = await this.configurationServiceExportConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns the configuration files for a given user
     * Get configuration files
     */
    async configurationServiceGetConfigsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendGetConfigsReply>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/rest/v1/configs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendGetConfigsReplyFromJSON(jsonValue));
    }

    /**
     * This endpoint returns the configuration files for a given user
     * Get configuration files
     */
    async configurationServiceGetConfigs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendGetConfigsReply> {
        const response = await this.configurationServiceGetConfigsRaw(initOverrides);
        return await response.value();
    }

}
