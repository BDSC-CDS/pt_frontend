/* tslint:disable */
/* eslint-disable */
/**
 * pt backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: development.bdsc@chuv.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcStatus,
  TemplatebackendGetLogsResponse,
} from '../models/index';
import {
    RpcStatusFromJSON,
    RpcStatusToJSON,
    TemplatebackendGetLogsResponseFromJSON,
    TemplatebackendGetLogsResponseToJSON,
} from '../models/index';

export interface AuditLogServiceGetLogsRequest {
    offset?: number;
    limit?: number;
    filters?: string;
    sortBy?: string;
}

export interface AuditLogServiceGetLogsForUserRequest {
    userid: number;
    offset?: number;
    limit?: number;
    filters?: string;
    sortBy?: string;
}

/**
 * 
 */
export class AuditLogApi extends runtime.BaseAPI {

    /**
     * Gets a list of logs.
     * Get logs
     */
    async auditLogServiceGetLogsRaw(requestParameters: AuditLogServiceGetLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendGetLogsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.filters !== undefined) {
            queryParameters['filters'] = requestParameters.filters;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/audit/logs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendGetLogsResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of logs.
     * Get logs
     */
    async auditLogServiceGetLogs(requestParameters: AuditLogServiceGetLogsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendGetLogsResponse> {
        const response = await this.auditLogServiceGetLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets logs for a specific user.
     * Get logs for a user
     */
    async auditLogServiceGetLogsForUserRaw(requestParameters: AuditLogServiceGetLogsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatebackendGetLogsResponse>> {
        if (requestParameters.userid === null || requestParameters.userid === undefined) {
            throw new runtime.RequiredError('userid','Required parameter requestParameters.userid was null or undefined when calling auditLogServiceGetLogsForUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.filters !== undefined) {
            queryParameters['filters'] = requestParameters.filters;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/audit/users/{userid}/logs`.replace(`{${"userid"}}`, encodeURIComponent(String(requestParameters.userid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatebackendGetLogsResponseFromJSON(jsonValue));
    }

    /**
     * Gets logs for a specific user.
     * Get logs for a user
     */
    async auditLogServiceGetLogsForUser(requestParameters: AuditLogServiceGetLogsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatebackendGetLogsResponse> {
        const response = await this.auditLogServiceGetLogsForUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
